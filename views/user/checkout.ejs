<%- include("../partial/user/header.ejs") %>

<style>
  /* Checkout Page Styles (No change) */
  .checkout-container {
    padding:7rem 0;
    
  }
  .checkout-row {
    display: flex;
    gap: 2rem;
  }
  .checkout-left,
  .checkout-right {
    background-color: #fff;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
  }
  .checkout-left {
    width: 65%;
  }
  .checkout-right {
    width: 30%;
  }
  .checkout-right h4 {
        font-size: 1rem;
        font-weight: bold;
        color: #757575;
        margin-bottom: 20px;
  }
  .checkout-right .item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 14px;
    }
  .checkout-right .item .value {
        font-weight: bold;
    }
  .checkout-right .item .discount {
        color: #388e3c;
    }
  .checkout-right .item .free {
        color: #388e3c;
    }
  .checkout-right .total {
        display: flex;
        justify-content: space-between;
        font-size: 16px;
        font-weight: bold;
        margin-top: 20px;
        margin-bottom: 10px;
    }
  .checkout-right .savings {
        color: #388e3c;
        font-size: 14px;
        text-align: center;
    }
  .coupon-section {
    margin: 20px 0; /* Spacing around the coupon section */
}

.coupon-section h6 {
    font-size: 1rem; /* Heading size */
    margin-bottom: 10px; /* Spacing below the heading */
    color: #333; /* Color of the heading */
}

.coupon-input-group {
    display: flex; /* Use flexbox for alignment */
    align-items: center; /* Center vertically */
}

.coupon-select {
    flex-grow: 1; /* Make the dropdown take up available space */
    padding: 10px; /* Padding inside the dropdown */
    border: 1px solid #ccc; /* Border styling */
    border-radius: 4px; /* Rounded corners */
    font-size: 1rem; /* Font size */
}

.apply-button {
    padding: 10px 20px; /* Padding inside the button */
    margin-left: 10px; /* Spacing between the dropdown and button */
    border: none; /* Remove default border */
    border-radius: 4px; /* Rounded corners */
    background-color: #f86e1e; /* Button color */
    color: white; /* Text color */
    font-size: 0.7rem; /* Font size */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s; /* Smooth transition for hover effect */
}

.apply-button:hover {
    background-color: #218838; /* Darker green on hover */
}
@media (max-width: 600px) {
    .coupon-input-group {
        flex-direction: column; /* Stack items vertically */
    }
    
    .apply-button {
        margin-left: 0; /* Remove left margin */
        margin-top: 10px; /* Add top margin for spacing */
        width: 100%; /* Make button full width on mobile */
    }
    
    .coupon-select {
        width: 100%; /* Ensure dropdown is full width on mobile */
    }
}

  .address-section {
    margin-bottom: 20px;
  }
  .address-card {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-bottom: 10px;
    align-items: center;
  }
  .address-card button {
    background-color: #4bea11;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
  }
  .add-new-address-btn {
    width: 100%;
    padding: 10px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  .order-summary {
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
    margin-bottom: 10px;
  }
  .order-summary div {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
  }
  .payment-methods {
    margin-top: 20px;
  }
  .place-order-btn {
    margin-top: 1rem;
    width: 50%;
    padding: 8px;
    background-color: #24b60ef5;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
  }


</style>

<div class="container checkout-container">
  <form action="/checkout/place-order" method="POST">
    <div class="checkout-row">
      <!-- Left Section: Coupon, Address -->
      <div class="checkout-left">
<!-- Coupon Section -->
<div class="coupon-section">
  <h6>Select Coupon</h6>
  <div class="coupon-input-group">
    <select id="couponSelect" class="coupon-select" <% if (cart.appliedCoupon && cart.appliedCoupon.code) { %> disabled <% } %>>
      <option value="">-- Select a Coupon --</option>
      <% coupons.forEach(coupon => { %>
        <option value="<%= coupon.code %>" 
          <%= cart.appliedCoupon && cart.appliedCoupon.code === coupon.code ? 'selected' : '' %>>
          <%= coupon.code %> - <%= coupon.discountType === 'percentage' ? coupon.discountAmount + '%' : '₹' + coupon.discountAmount %> off
        </option>
      <% }); %>
    </select>
    <button id="couponBtn" class="apply-button">
      <%= cart.appliedCoupon && cart.appliedCoupon.code ? 'Remove Coupon' : 'Apply Coupon' %>
    </button>
  </div>
</div>
      

        <!-- Address Section -->
        <div class="address-section">
          <h6>Select Delivery Address</h6>

          <% addresses.forEach(address => { %>
          <div class="address-card">
            <div>
              <p><%=address.name%></p>
              <p><%= address.landMark %>, <%= address.city %>,<%=address.state%>, <%=address.pincode %></p>
              <p>Phone:<%=address.phone%></p>   
              
            </div>
            <div>
              <button
                class="btn btn-sm btn-secondary edit-address-btn"
                data-id="<%= address._id %>"
                data-bs-toggle="modal"
                data-bs-target="#editAddressModal"
              >
                <i class="fas fa-edit"></i> Edit
              </button>
              <input
                type="radio"
                name="selectedAddress"
                value="<%= address._id %>"
                required
              />
            </div>
          </div>
          <% }) %>

          <button
            class="btn btn-primary btn-sm"
            data-bs-toggle="modal"
            data-bs-target="#addAddressModal"
          >
            <i class="fas fa-plus"></i> Add New Address
          </button>
        </div>
      </div>

      <!-- Right Section: Order Summary, Payment -->
      <div class="checkout-right">
        <h4>Order Summary</h4>

        <!-- Order Summary -->
        <div class="order-summary">

          <div class="item">
            <span>Price(<%= cart.items.length %> items)</span>
            <span class="value">₹<%= cart.totalPrice %></span>
          </div>
          <%if(cart.appliedCoupon && cart.appliedCoupon.code){%>
          <div class="item">
            <span>Coupon Discount</span>
                <span class="value discount">– ₹<%= cart.appliedCoupon.discountAmount%></span>
          </div>
          <%}%>
          <div class=" item">
            <span>Total Discount</span>
            <span class="value discount">– ₹<%= cart.totalDiscount %></span>
        </div>

          <div class="item">
            <span>Delivery Fee</span>
            <%if(cart.shippingFee == 0){%>
            <span class="value free"> Free</span>
            <%}else{%>
                <span class="value ">₹<%= cart.shippingFee %> </span>
            <%}%>
          </div>
          <div class="item">
            <span>Tax</span>
            <span class="value">0%</span>
          </div>
          <hr>
          <div class="total">
            <span>Total  Payable</span>
            <span>₹<%= cart.finalAmount %></span>
          </div>
          <hr>
          <div class="savings">You will save ₹<%= cart.totalDiscount %> on this order</div>
        </div>

        <!-- Payment Methods -->
        <div class="payment-methods">
          <h4>Choose Payment Method</h4>
          <label>
            <input
              type="radio"
              name="paymentMethod"
              value="Razorpay"
              required
            />
            UPI(Razor Pay) </label
          ><br />
          <label>
            <input type="radio" name="paymentMethod" value="Wallet" />
            Pay From Wallet </label
          ><br />
          <label>
            <input type="radio" name="paymentMethod" value="Cash on Delivery" />
            Cash On Delivery
          </label>
        </div>

        <!-- Place Order Button -->
        <button id="placeOrderBtn" type="button" class="place-order-btn">Place Order</button>
      </div>
    </div>
  </form>


        </div>

  <!-- Add Address Modal -->
  <div
    class="modal fade"
    id="addAddressModal"
    tabindex="-1"
    aria-labelledby="addAddressModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <form action="/address/add" method="POST">
          <div class="modal-header">
            <h5 class="modal-title" id="addAddressModalLabel">
              Add New Address
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <div class="form-group">
              <label for="add-name" class="form-label">Name</label>
              <input
                type="text"
                class="form-control"
                id="add-name"
                name="name"
                required
              />
            </div>
            <div class="form-group">
              <label for="add-city" class="form-label">City</label>
              <input
                type="text"
                class="form-control"
                id="add-city"
                name="city"
                required
              />
            </div>
            <div class="form-group">
              <label for="add-landmark" class="form-label">Landmark</label>
              <input
                type="text"
                class="form-control"
                id="add-landmark"
                name="landMark"
                required
              />
            </div>
            <div class="form-group">
              <label for="add-state" class="form-label">State</label>
              <input
                type="text"
                class="form-control"
                id="add-state"
                name="state"
                required
              />
            </div>
            <div class="form-group">
              <label for="add-pincode" class="form-label">Pincode</label>
              <input
                type="number"
                class="form-control"
                id="add-pincode"
                name="pincode"
                required
              />
            </div>
            <div class="form-group">
              <label for="add-phone" class="form-label">Phone</label>
              <input
                type="text"
                class="form-control"
                id="add-phone"
                name="phone"
                required
              />
            </div>
            <div class="form-group">
              <label for="add-altPhone" class="form-label"
                >Alternate Phone</label
              >
              <input
                type="text"
                class="form-control"
                id="add-altPhone"
                name="altPhone"
                required
              />
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">Add Address</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Edit Address Modal -->
  <div
    class="modal fade"
    id="editAddressModal"
    tabindex="-1"
    aria-labelledby="editAddressModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="editAddressForm" method="POST">
          <div class="modal-header">
            <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <div class="form-group">
              <label for="edit-name" class="form-label">Name</label>
              <input
                type="text"
                class="form-control"
                id="edit-name"
                name="name"
                required
              />
            </div>
            <div class="form-group">
              <label for="edit-city" class="form-label">City</label>
              <input
                type="text"
                class="form-control"
                id="edit-city"
                name="city"
                required
              />
            </div>
            <div class="form-group">
              <label for="edit-landmark" class="form-label">Landmark</label>
              <input
                type="text"
                class="form-control"
                id="edit-landmark"
                name="landMark"
                required
              />
            </div>
            <div class="form-group">
              <label for="edit-state" class="form-label">State</label>
              <input
                type="text"
                class="form-control"
                id="edit-state"
                name="state"
                required
              />
            </div>
            <div class="form-group">
              <label for="edit-pincode" class="form-label">Pincode</label>
              <input
                type="number"
                class="form-control"
                id="edit-pincode"
                name="pincode"
                required
              />
            </div>
            <div class="form-group">
              <label for="edit-phone" class="form-label">Phone</label>
              <input
                type="text"
                class="form-control"
                id="edit-phone"
                name="phone"
                required
              />
            </div>
            <div class="form-group">
              <label for="edit-altPhone" class="form-label"
                >Alternate Phone</label
              >
              <input
                type="text"
                class="form-control"
                id="edit-altPhone"
                name="altPhone"
                required
              />
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JS and dependencies  -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Handle Edit Address Button Click
  $(document).ready(function () {
    $(".edit-address-btn").on("click", function () {
      const addressId = $(this).data("id");
      // Fetch address data via AJAX
      $.ajax({
        url: `/address/${addressId}`,
        method: "GET",
        success: function (data) {
          // Populate the edit form fields
          $("#edit-name").val(data.name);
          $("#edit-city").val(data.city);
          $("#edit-landmark").val(data.landMark);
          $("#edit-state").val(data.state);
          $("#edit-pincode").val(data.pincode);
          $("#edit-phone").val(data.phone);
          $("#edit-altPhone").val(data.altPhone);
          // Set the form action to the update route
          $("#editAddressForm").attr("action", `/address/edit/${addressId}`);
        },
        error: function (err) {
          Swal.fire(data.message || 'Failed to fetch address details.', '', 'error');
    
        },
      });
    });
  });
</script>

<script>
  // Add event listeners for form submission
  document.querySelector('form[action="/address/add"]').addEventListener('submit', validateAddForm);
  document.getElementById('editAddressForm').addEventListener('submit', validateEditForm);

  // Helper function to show error messages
  function showError(input, message) {
      const formGroup = input.closest('.form-group');
      formGroup.classList.add('has-error');
      
      let error = formGroup.querySelector('.error');
      if (!error) {
          error = document.createElement('small');
          error.className = 'error text-danger';
          formGroup.appendChild(error);
      }
      error.textContent = message;
  }

  // Helper function to clear error messages
  function clearError(input) {
      const formGroup = input.closest('.form-group');
      formGroup.classList.remove('has-error');
      
      const error = formGroup.querySelector('.error');
      if (error) {
          error.remove();
      }
  }

  // Validate form fields
  function validateForm(formId) {
      let isValid = true;

      // Define the form to be validated
      const form = document.getElementById(formId);
      
      // Clear previous errors
      form.querySelectorAll('.error').forEach(el => el.remove());

      // Name validation
      const name = form.querySelector('input[name="name"]');
      if (name.value.trim() === "") {
          showError(name, "Name is required.");
          isValid = false;
      }

      // City validation
      const city = form.querySelector('input[name="city"]');
      if (city.value.trim() === "") {
          showError(city, "City is required.");
          isValid = false;
      }

      // Landmark validation
      const landmark = form.querySelector('input[name="landMark"]');
      if (landmark.value.trim() === "") {
          showError(landmark, "Landmark is required.");
          isValid = false;
      }

      // State validation
      const state = form.querySelector('input[name="state"]');
      if (state.value.trim() === "") {
          showError(state, "State is required.");
          isValid = false;
      }

      // Pincode validation (only numbers and exact length)
      const pincode = form.querySelector('input[name="pincode"]');
      if (!/^\d{6}$/.test(pincode.value.trim())) {
          showError(pincode, "Enter a valid 6-digit pincode.");
          isValid = false;
      }

      // Phone validation (only numbers and exact length)
      const phone = form.querySelector('input[name="phone"]');
      if (!/^\d{10}$/.test(phone.value.trim())) {
          showError(phone, "Enter a valid 10-digit phone number.");
          isValid = false;
      }

      // Alternate phone validation (optional but if entered, only numbers)
      const altPhone = form.querySelector('input[name="altPhone"]');
      if (altPhone.value.trim() !== "" && !/^\d{10}$/.test(altPhone.value.trim())) {
          showError(altPhone, "Enter a valid 10-digit alternate phone number.");
          isValid = false;
      }

      return isValid;
  }

  // Validate Add Address Form
  function validateAddForm(event) {
      if (!validateForm('addAddressModal')) {
          event.preventDefault();
      }
  }

  // Validate Edit Address Form
  function validateEditForm(event) {
      if (!validateForm('editAddressForm')) {
          event.preventDefault();
      }
  }
</script>

<script>
  document.getElementById("placeOrderBtn").onclick = async function () {
    const paymentMethod = document.querySelector("input[name='paymentMethod']:checked").value;
    const selectedAddress = document.querySelector("input[name='selectedAddress']:checked").value;

    // Check if the payment method is COD
    if (paymentMethod === "Cash on Delivery") {
      // Send the order data to the backend for COD
      const orderResponse = await fetch("/checkout/place-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ paymentMethod, selectedAddress })
      });

      const result = await orderResponse.json();
      if (result.success) {
        Swal.fire({
                    icon: "success",
                    title: "Order Placed!",
                    text: "Your order has been successfully placed with Cash on Delivery.",
                    timer: 2000,
                    showConfirmButton: false,
                }).then(() => {
                    window.location.href = "/order-success";
                });
      } else {
        Swal.fire({
                    icon: "error",
                    title: "Order Failed",
                    text: result.message || "Failed to place order with Cash on Delivery.",
                });
      }
    } else if (paymentMethod === "Razorpay") {
      // Fetch Razorpay order details if Razorpay is selected
      const orderResponse = await fetch("/checkout/place-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ paymentMethod, selectedAddress })
      });
      const orderData = await orderResponse.json();

      const options = {
        key: 'rzp_test_PJaRaBSRr9BX33',
        amount: orderData.amount,
        currency: orderData.currency,
        order_id: orderData.razorpayOrderId,
        handler: async function (response) {
          // Payment verification
          const verificationResponse = await fetch("/checkout/verify-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
              orderId: orderData.orderId,
            }),
          });

          const result = await verificationResponse.json();
          if (result.success) {
            Swal.fire({
                            icon: "success",
                            title: "Payment Successful!",
                            text: "Your payment has been successfully verified.",
                            timer: 2000,
                            showConfirmButton: false,
                        }).then(() => {
                            window.location.href = "/order-success";
                        });
          } else {
            Swal.fire({
                            icon: "error",
                            title: "Payment Failed",
                            text: "Payment verification failed. Please try again!",
                        });
          }
        },
        theme: { color: "#3399cc" },
      };

      const rzp = new Razorpay(options);
      rzp.open();
    }
    //order using wallet payment
    else if (paymentMethod === "Wallet") {
        // Handle Wallet payment
        const orderResponse = await fetch("/checkout/place-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ paymentMethod, selectedAddress })
        });

        const result = await orderResponse.json();
        if (result.success) {
            Swal.fire({
                icon: "success",
                title: "Order Placed!",
                text: "Your order has been successfully placed using Wallet.",
                timer: 2000,
                showConfirmButton: false,
            }).then(() => {
                window.location.href = "/order-success";
            });
        } else {
            Swal.fire({
                icon: "error",
                title: "Order Failed",
                text: result.message || "Failed to place order using Wallet.",
            });
        }
    }
  };
</script>



<script>
  document.getElementById('couponBtn').addEventListener('click', function() {
    const selectedCoupon = document.getElementById('couponSelect').value;
    const isCouponApplied = this.textContent.trim() === 'Remove Coupon';

    // Determine the appropriate endpoint based on button state
    const endpoint = isCouponApplied ? '/coupon/remove' : '/coupon/apply';
    const method = isCouponApplied ? 'DELETE' : 'POST';




    if (!selectedCoupon && !isCouponApplied) {
      Swal.fire('Please select a coupon');
      return;
    }

    fetch(endpoint, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ couponCode: selectedCoupon })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire(`${isCouponApplied ? 'Coupon removed' : 'Coupon applied'} successfully!`, '', 'success');
        if (isCouponApplied) {
            // Coupon was removed
            document.getElementById('couponSelect').disabled = false; // Enable the coupon selection
            document.getElementById('couponBtn').textContent = 'Apply Coupon'; // Change button text
        } else {
            // Coupon was applied
            document.getElementById('couponSelect').disabled = true; // Disable coupon selection
            document.getElementById('couponBtn').textContent = 'Remove Coupon'; // Change button text
        }
        
      } else {
        Swal.fire(data.message || 'An error occurred', '', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire('An error occurred while processing your request.', '', 'error');
    });
  });
</script>



<%- include("../partial/user/footer.ejs") %>
